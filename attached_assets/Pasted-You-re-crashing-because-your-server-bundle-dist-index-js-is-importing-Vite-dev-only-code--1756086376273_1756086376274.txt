You’re crashing because your **server bundle (`dist/index.js`) is importing Vite dev-only code**:

> `Error [ERR_MODULE_NOT_FOUND]: Cannot find package '@vitejs/plugin-react' imported from /app/dist/index.js`

That should never happen in production. It means somewhere in your server code you (directly or indirectly) import **`vite`**, **`@vitejs/plugin-react`**, or **`vite.config.*`**. On Railway, devDependencies aren’t installed, so Node can’t resolve them and the process dies.

Here’s the exact fix—remove any top-level Vite imports from the server and make dev tooling only load in dev via dynamic import.

---

## 1) Find where the server imports Vite

From the project root, run:

```bash
rg -n "vite|plugin-react|vite.config" server | cat
```

You’ll likely see hits in `server/index.ts` (or a helper it imports).

---

## 2) Patch the server to load Vite **only in dev** (dynamic import)

Open `server/index.ts`. **Delete** any top-level imports like:

```ts
// ❌ remove any of these if present
import { createServer as createViteServer } from 'vite'
import react from '@vitejs/plugin-react'
import viteConfig from '../vite.config'
```

Then, **inside** your server bootstrap (after you create `app`), add this guarded block:

```ts
// dev-only Vite middleware (never runs in production)
if (process.env.NODE_ENV !== 'production' && process.env.USE_VITE_DEV === '1') {
  try {
    const { createServer } = await import('vite');
    const react = (await import('@vitejs/plugin-react')).default;

    const vite = await createServer({
      root: path.resolve(process.cwd(), 'client'),
      server: { middlewareMode: true },
      plugins: [react()],
    });

    app.use(vite.middlewares);
    console.log('Vite dev middleware enabled');
  } catch (err) {
    console.error('Vite dev middleware failed to start:', err);
  }
}
```

Notes:

* No top-level Vite imports remain, so the **production bundle won’t contain** `@vitejs/plugin-react`.
* Locally, if you want the Vite dev server, run with `USE_VITE_DEV=1`.

---

## 3) Rebuild and verify the bundle is clean

```bash
npm run build
# prove the server bundle no longer references the plugin
! rg -n "@vitejs/plugin-react" dist/index.js && echo "OK: no vite plugin in bundle"
```

You should see `OK: no vite plugin in bundle`.

Commit and push:

```bash
git add server/index.ts
git commit -m "fix: remove Vite from server bundle; dev-only dynamic import"
git push
```

Redeploy on Railway.

---

## 4) (Only if you need an immediate hotfix)

If you can’t patch code right now and just need the app back up, you can **temporarily** install dev deps in production so the bad import resolves:

* In Railway → Variables, set `NPM_CONFIG_PRODUCTION=false` (or `NODE_ENV=development`) **for the build**.
* Or move `vite` and `@vitejs/plugin-react` from `devDependencies` to `dependencies` in `package.json`.

Then redeploy. **After you patch the server as above, revert this** to keep your image lean.

---

## Why this suddenly showed up

We recently changed the build/start pipeline to always run the compiled server (`dist/index.js`). If your server had a leftover import path that pulled in Vite (or `vite.config.ts`), esbuild left it as an external ESM import. Locally you didn’t notice because you had dev deps installed; in Railway, they aren’t, so it crashed. Removing those imports fixes it at the source.

---

## Quick sanity checklist after redeploy

* `Deploy Logs` no longer show `@vitejs/plugin-react` or `vite` missing.
* `prestart` runs `node dist/migrate.js` successfully (you already had ✅).
* App starts on `node dist/index.js` without module errors.
* Frontend still serves via `express.static` from `dist/public` (no need for Vite in prod).

If anything in the patch is unclear, paste the output of `rg -n "vite|plugin-react|vite.config" server` and I’ll point at the exact lines to delete.
